function [mazes, criteria, globalSettings, vr] = PoissonBlocks_cnnlstm_full_transient_unique(vr)

  %________________________________________ 1 _____ 2 _____ 3 _____ 4 _____ 5 _____ 6 _____ 7 _________ 8 ______________ 9 ___________________ 10___________________ 11 _____________________12___________________
  mazes     = struct( 'lStart'          , {0    , 0    }   ...
                    , 'lCue'            , {85   , 85   }   ...
                    , 'lMemory'         , {5    , 5    }   ...
                    , 'tri_turnHint'    , {false, false  }   ...
                    , 'cueDuration'     , {-0.3  , -0.3 }   ... seconds %duration of maze 11 was 0.2 until 3-11-16 (not included)
                    , 'cueVisibleAt'    , {10,   10  }   ...
                    , 'cueProbability'  , {1.2   , 1.2   }   ...
                    , 'cueDensityPerM'  , {3.5   , 3.5   }   ...
                    , 'FracEdgeTrials'  , {0.05  , 0.05  }   ...
                    , 'EdgeProbDef'     , {0.01  , 0.01  }   ...
                    );                                                                                                                                                                                                                              
  criteria  = struct( 'numTrials'       , {20000 , 20000   }   ...
                    , 'numTrialsPerMin' , {3     , 3     }   ... 
                    , 'warmupNTrials'   , {[]    , []    }   ...
                    , 'numSessions'     , {1     , 1     }   ...
                    , 'performance'     , {1    , .9    }   ...
                    , 'maxBias'         , {.1    , .1    }   ...
                    , 'warmupMaze'      , {[]    , []    }   ...
                    , 'warmupPerform'   , {[]    , []    }   ...
                    , 'warmupBias'      , {[]    , []    }   ...
                    , 'warmupMotor'     , {[]    , []    }   ...
                    );

  globalSettings          = {'cueMinSeparation', 14, 'hHint', 30};
  vr.numMazesInProtocol   = numel(mazes);
  vr.stimulusGenerator    = @PoissonStimulusTrain_discrete2;
  vr.stimulusParameters   = {'cueVisibleAt','cueDensityPerM', 'cueProbability', 'nCueSlots', 'cueMinSeparation', 'panSessionTrials','FracEdgeTrials','EdgeProbDef'}; 
  vr.inheritedVariables   = {'cueDuration', 'lCue', 'lMemory'};  %erased 'cueVisibleAt' 5-17-16

  
  if nargout < 1
    figure; plot([mazes.lStart] + [mazes.lCue] + [mazes.lMemory], 'linewidth',1.5); xlabel('Shaping step'); ylabel('Maze length (cm)'); grid on;
    hold on; plot([mazes.lMemory], 'linewidth',1.5); legend({'total', 'memory'}, 'Location', 'east'); grid on;
    figure; plot([mazes.lMemory] ./ [mazes.lCue], 'linewidth',1.5); xlabel('Shaping step'); ylabel('L(memory) / L(cue)'); grid on;
    figure; plot([mazes.cueDensityPerM], 'linewidth',1.5); set(gca,'ylim',[0 6.5]); xlabel('Shaping step'); ylabel('Tower density (count/m)'); grid on;
    hold on; plot([mazes.cueDensityPerM] .* (1 - 1./(1 + exp([mazes.cueProbability]))), 'linewidth',1.5);
    hold on; plot([mazes.cueDensityPerM] .* (1./(1 + exp([mazes.cueProbability]))), 'linewidth',1.5);
    hold on; plot([1 numel(mazes)], [1 1].*(100/globalSettings{2}), 'linewidth',1.5, 'linestyle','--');
    legend({'\rho_{L} + \rho_{R}', '\rho_{salient}', '\rho_{distract}', '(maximum)'}, 'location', 'northwest');
  end

end
